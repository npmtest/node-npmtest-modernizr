{"/home/travis/build/npmtest/node-npmtest-modernizr/test.js":"/* istanbul instrument in package npmtest_modernizr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-modernizr/lib.npmtest_modernizr.js":"/* istanbul instrument in package npmtest_modernizr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_modernizr = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_modernizr = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-modernizr/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-modernizr && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_modernizr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_modernizr\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_modernizr.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_modernizr.rollup.js'] =\n            local.assetsDict['/assets.npmtest_modernizr.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_modernizr.__dirname +\n                    '/lib.npmtest_modernizr.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-modernizr/modernizr/lib/cli.js":"'use strict';\n\nmodule.exports = {\n  build: require('./build'),\n  metadata: require('./metadata'),\n  options: require('./options'),\n};\n","/home/travis/build/npmtest/node-npmtest-modernizr/modernizr/lib/build.js":"// this file configures require.js based on enviroment\n'use strict';\n\nvar inBrowser = typeof define == 'function' && typeof define.amd == 'object';\n\nvar _extend = function(a, b) {\n  for (var prop in b) {\n    var supplied = b[prop];\n    if (Object.prototype.toString.call(supplied) === '[object Object]') {\n      a[prop] = a[prop] || {};\n      _extend(a[prop], supplied);\n    } else {\n      a[prop] = b[prop];\n    }\n  }\n};\n\nvar baseRequireConfig = {\n  optimize: 'none',\n  generateSourceMaps: false,\n  optimizeCss: 'none',\n  useStrict: true,\n  include: ['modernizr-init'],\n  fileExclusionRegExp: /^(.git|node_modules|modulizr|media|test)$/,\n  wrap: {\n    start: '\\n;(function(window, document, undefined){',\n    end: '})(window, document);'\n  },\n  onBuildWrite: function(id, path, contents) {\n    if (this.optimize === 'uglify2') {\n      // strip out documentation comments\n      contents = contents.replace(/\\/\\*\\![\\s\\S]*\\!\\*\\//m, '');\n    }\n\n    if ((/define\\(.*?\\{/).test(contents)) {\n      // remove AMD ceremony for use without require.js or almond.js\n      contents = contents.replace(/define\\(.*?\\{/, '');\n\n      contents = contents.replace(/\\}\\);\\s*?$/, '');\n\n      if (!contents.match(/Modernizr\\.add(Async)?Test\\(/)) {\n      // remove last return statement and trailing })\n        contents = contents.replace(/return.*[^return]*$/, '');\n      }\n    } else if ((/require\\([^\\{]*?\\{/).test(contents)) {\n      contents = contents.replace(/require[^\\{]+\\{/, '');\n      contents = contents.replace(/\\}\\);\\s*$/, '');\n    }\n\n    contents = contents.replace(/return addTest;/, '');\n\n    return contents;\n  }\n};\n\nfunction build(generate, generateBanner, pkg) {\n  return function build(config, cb) {\n    var requireConfig = {};\n    var banner;\n    config = config || {};\n    cb = cb || function noop() {};\n\n    _extend(requireConfig, baseRequireConfig);\n\n    requireConfig.rawText = {\n      'modernizr-init': generate(config)\n    };\n\n    if (config.minify) {\n      banner = generateBanner('compact', config);\n      requireConfig.optimize = 'uglify2';\n      requireConfig.uglify2 = {\n        mangle: {\n          except: ['Modernizr']\n        },\n        beautify: {\n          ascii_only: true\n        }\n      };\n    } else {\n      banner = generateBanner('full', config);\n      requireConfig.optimize = 'none';\n    }\n\n    requireConfig.out = function(output) {\n      output = banner + output;\n\n      // Remove `define('modernizr-init' ...)` and `define('modernizr-build' ...)`\n      output = output.replace(/(,\\s*)?define\\(\"modernizr-(init|build)\",\\s*function\\(\\)\\{\\};?\\)/g, '');\n      output = output.replace(/__VERSION__/g, pkg.version);\n\n      // Hack the prefix into place. Anything is way too big for something so small.\n      if (config && config.classPrefix) {\n        output = output.replace(/(classPrefix'?\\s?:\\s?)['\"\"']{2}(,)/, '$1\"' + config.classPrefix.replace(/\"/g, '\\\\\"') + '\"$2');\n      }\n\n      cb(output);\n\n    };\n\n    requirejs.optimize(requireConfig);\n  };\n}\n\nif (inBrowser) {\n  var suppliedConfig = self._modernizrConfig;\n  var metadataUrl = 'i/js/metadata.json';\n  var packageUrl = 'i/js/modernizr-git/package.json';\n  baseRequireConfig.baseUrl = '/i/js/modernizr-git/src';\n  baseRequireConfig.paths = {\n    text: '/i/js/requirejs-plugins/lib/text',\n    lib: '/i/js/modernizr-git/lib',\n    json: '/i/js/requirejs-plugins/src/json',\n    lodash: '/i/js/lodash',\n    test: '/i/js/modernizr-git/feature-detects'\n  };\n\n  if (suppliedConfig) {\n    metadataUrl = suppliedConfig.metadataUrl || metadataUrl;\n    packageUrl = suppliedConfig.packageUrl || packageUrl;\n    _extend(baseRequireConfig, suppliedConfig);\n  }\n\n  if (self._modernizrMetadata) {\n    requirejs.define('metadata', [], function() {return self._modernizrMetadata;});\n  } else {\n    requirejs.define('metadata', ['json!' + metadataUrl], function(pkg) {return pkg;});\n  }\n  requirejs.define('package', ['json!' + packageUrl], function(pkg) {return pkg;});\n} else {\n  var requirejs = require('requirejs');\n  var metadata = require('./metadata')();\n  var pkg = require('../package.json');\n\n  requirejs.define('metadata', [], function() {return metadata;});\n  requirejs.define('package', function() {return pkg;});\n\n  baseRequireConfig.baseUrl = __dirname + '/../src';\n  baseRequireConfig.paths = {\n    lodash: __dirname + '/../node_modules/lodash/lodash',\n    test: __dirname + '/../feature-detects',\n    lib: __dirname\n  };\n}\n\nrequirejs.config(baseRequireConfig);\n\nif (inBrowser) {\n  define('build', ['generate', 'lib/generate-banner', 'package'], build);\n} else {\n  var generateBanner = requirejs(__dirname + '/generate-banner.js');\n  var generate = requirejs('generate');\n  var pkg = requirejs('package');\n  var _build = build;\n  module.exports = function build() {\n    return _build(generate, generateBanner, pkg).apply(undefined, arguments);\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-modernizr/modernizr/lib/metadata.js":"var fs = require('fs');\nvar file = require('file');\nvar Remarkable = require('remarkable');\nvar polyfills = require('./polyfills.json');\nvar viewRoot = fs.realpathSync(__dirname + '/../feature-detects');\n\nfunction metadata(cb) {\n  var tests = [];\n  var md = new Remarkable();\n  file.walkSync(viewRoot, function(start, dirs, files) {\n    files.forEach(function(file) {\n      if (file === '.DS_Store') {\n        return;\n      }\n      var test = fs.readFileSync(start + '/' + file, 'utf8');\n      // TODO :: make this regex not suck\n      var metaRE = /\\/\\*\\!([\\s\\S]*)\\!\\*\\//m;\n      var matches = test.match(metaRE);\n      var docRE = /\\/\\*\\sDOC([\\s\\S]*?)\\*\\//m;\n      var docmatches = test.match(docRE);\n      var depRE = /define\\((\\[[^\\]]*\\]),/;\n      var depMatches = test.match(depRE);\n\n      var metadata;\n\n      if (matches && matches[1]) {\n        try {\n          metadata = JSON.parse(matches[1]);\n        } catch (e) {\n          throw new Error('Error Parsing Metadata: ' + file + '\\nInput: `' + matches[1] + '`');\n        }\n      }\n      else {\n        metadata = {};\n      }\n\n      var docs = null;\n\n      if (docmatches && docmatches[1]) {\n        docs = md.render(docmatches[1].trim());\n      }\n\n      metadata.doc = docs;\n\n      var deps = [];\n      var matchedDeps;\n\n      if (depMatches && depMatches[1]) {\n        try {\n          matchedDeps = JSON.parse(depMatches[1].replace(/'/g, '\"'));\n        } catch (e) {\n          throw new Error('Couldn\\'t parse dependencies for `' + file + '`:\\n`' + depMatches[1] + '\\n`');\n        }\n        matchedDeps.forEach(function(dep) {\n          if (dep === 'Modernizr') {\n            return;\n          }\n          deps.push(dep);\n        });\n      } else {\n        throw new Error('Couldn\\'t find the define for `' + file + '`');\n      }\n      metadata.deps = deps;\n\n      var baseDir = __dirname.replace(/lib$/, '');\n      metadata.path = './' + (start + '/' + file).replace(baseDir, '').replace(/\\\\/g, '/');\n      metadata.amdPath = metadata.path.replace(/^\\.\\/feature\\-detects/, 'test').replace(/\\.js$/i, '');\n\n      if (!metadata.name) {\n        metadata.name = metadata.amdPath;\n      }\n\n      var pfs = [];\n      if (metadata.polyfills && metadata.polyfills.length) {\n        metadata.polyfills.forEach(function(polyname) {\n          if (polyfills[polyname]) {\n            pfs.push(polyfills[polyname]);\n          }\n          else {\n            throw new Error(metadata.name + ': Polyfill not found in `' + file + '`: ' + polyname);\n          }\n        });\n      }\n      metadata.polyfills = pfs;\n\n      if (!metadata.async) {\n        metadata.async = false;\n      }\n\n      if (!metadata.notes) {\n        metadata.notes = [];\n      }\n\n      if (!metadata.warnings) {\n        metadata.warnings = [];\n      }\n\n      if (!metadata.caniuse) {\n        metadata.caniuse = null;\n      }\n\n      if (!metadata.cssclass && metadata.property) {\n        metadata.cssclass = metadata.property;\n      } else {\n        metadata.cssclass = null;\n      }\n\n      // Maybe catch a bug\n      if (!metadata.doc && metadata.docs) {\n        metadata.doc = metadata.docs;\n        delete metadata.docs;\n      }\n\n      // If you want markdown parsed code minus the docs and metadata, this'll do it.\n      // Off by default for now.\n      // metadata.code =  md.render('```javascript\\n' + test.replace(metaRE, '').replace(docRE, '') + '\\n```');\n\n      if (!metadata.tags) {\n        metadata.tags = [];\n      }\n\n      if (!metadata.authors) {\n        metadata.authors = [];\n      }\n\n      if (!metadata.knownBugs) {\n        metadata.knownBugs = [];\n      }\n\n      tests.push(metadata);\n    });\n  });\n\n  if (cb && typeof cb == 'function') {\n    return cb(tests);\n  }\n  return tests;\n}\n\n\nmodule.exports = metadata;\n","/home/travis/build/npmtest/node-npmtest-modernizr/modernizr/lib/options.js":"var fs = require('fs');\nvar _ = require('lodash');\nvar file = require('file');\nvar jsdoc = require('doctrine');\nvar srcRoot = fs.realpathSync(__dirname + '/../src');\nvar commentRE = /^(\\s+)?(\\/\\*)?\\*(\\/)?\\s?/mg;\nvar jsdocRE = /[^\\S\\r\\n]*\\/(?:\\*{2})([\\W\\w]+?)\\*\\//mg;\n\nvar stripComments = function(str) {\n  return str.replace(commentRE, '');\n};\n\nfunction options(cb, allMetadata) {\n  var opts;\n\n  file.walkSync(srcRoot, function(start, dirs, files) {\n    opts = _.chain(files)\n      .map(function(file) {\n        var srcFile = fs.readFileSync(start + '/' + file, 'utf8');\n        var docs = srcFile.match(jsdocRE);\n\n        if (docs) {\n          docs = docs\n            .map(stripComments)\n            .map(function(str) {\n              return jsdoc.parse(str, {\n                sloppy: true,\n                tags: [\n                  'access',\n                  'author',\n                  'class',\n                  'example',\n                  'function',\n                  'memberOf',\n                  'memberof',\n                  'name',\n                  'optionName',\n                  'optionProp',\n                  'param',\n                  'params',\n                  'preserve',\n                  'private',\n                  'returns',\n                  'type'\n                ]\n              });\n            });\n\n          var option = _.chain(docs)\n            .flatten()\n            .filter(function(doc) {\n              if (allMetadata) {\n                return true;\n              } else {\n                return doc && _.some(doc.tags, {title: 'optionName'});\n              }\n            })\n            .map(function(opt) {\n              if (allMetadata) {\n                return opt;\n              } else {\n                var tags = opt.tags.filter(function(tag) {\n                  return tag.title.indexOf('option') === 0;\n                });\n\n                return {\n                  name: _.filter(tags, {title: 'optionName'})[0].description,\n                  property: _.filter(tags, {title: 'optionProp'})[0].description\n                };\n              }\n            })\n            .value();\n\n          return option;\n        }\n      })\n      .filter(function(doc) {\n        return doc && doc.length;\n      })\n      .flatten()\n      .value();\n\n  });\n\n  if (cb) {\n    cb(opts);\n  }\n\n  return opts;\n\n}\n\nmodule.exports = options;\n"}